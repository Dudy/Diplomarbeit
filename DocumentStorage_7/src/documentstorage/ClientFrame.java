/*
 * ClientFrame.java
 *
 * Created on 10. Januar 2008, 17:05
 */
package documentstorage;

import p2p_integrationVCS_client.DocumentType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;

/**
 *
 * @author  podolak
 */
public class ClientFrame extends javax.swing.JFrame {

    private final static Logger LOGGER = Logger.getLogger(ClientFrame.class);
    private boolean connected = false;
    private ClientController controller;
    private Icon onlineIcon;
    private Icon offlineIcon;
    private /*final*/ Timer busyIconTimer;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private Monitor monitor;
    private File xmiFile;
    private File appStoreFile;
    private JLabel contextMenuSource;

    /** Creates new form ClientFrame */
    public ClientFrame() {
        this(null);
    }

    /** Creates new form ClientFrame */
    public ClientFrame(ClientController controller) {
        this(controller, "no name");
    }

    public ClientFrame(ClientController controller, String name) {
        onlineIcon = new ImageIcon(ClientFrame.class.getResource("/documentstorage/resources/onlineIcon.png"));
        offlineIcon = new ImageIcon(ClientFrame.class.getResource("/documentstorage/resources/offlineIcon.png"));

        initComponents();

        source.putClientProperty("indicator", DocumentType.SOURCE);
        link.putClientProperty("indicator", DocumentType.LINK);
        target.putClientProperty("indicator", DocumentType.TARGET);

        p2pStatus.setIcon(offlineIcon);

        this.controller = controller;

        initStatusIcons();

        checkoutID.setText("");

        setTitle(name);
    }

    public void setBootAddress(String bootAddressText) {
        bootAddress.setText(bootAddressText);
    }

    public String getBootAddress() {
        return bootAddress.getText();
    }

    public void setLocalBindPort(String localport) {
        localBindPort.setText(localport);
    }

    public String getLocalBindPort() {
        return localBindPort.getText();
    }

    public void setP2PAccessFieldEnabled(boolean state) {
        bootAddress.setEnabled(state);
        localBindPort.setEnabled(state);
    }

    public void start() {
        if (!busyIconTimer.isRunning()) {
            p2pStatus.setIcon(busyIcons[0]);
            p2pStatus.setText("connecting");
            busyIconIndex = 0;
            busyIconTimer.start();
        }
    }

    public void stop() {
        busyIconTimer.stop();
    }

    private void initStatusIcons() {
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = new ImageIcon(ClientFrame.class.getResource(
                    "/documentstorage/resources/busyicons" +
                    "/busy-icon" + i + ".png"));
        }

        busyIconTimer = new Timer(30, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                p2pStatus.setIcon(busyIcons[busyIconIndex]);
            }
        });
    }

    public void appendOutput(String text) {
        output.append(text + "\n");
        output.setCaretPosition(output.getText().length());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        editMenuItem = new javax.swing.JMenuItem();
        p2pPanel = new javax.swing.JPanel();
        bootAddressLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bootAddress = new javax.swing.JTextField();
        localBindPort = new javax.swing.JTextField();
        connectDisconnectButton = new javax.swing.JButton();
        localCopyPanel = new javax.swing.JPanel();
        source = new javax.swing.JLabel();
        link = new javax.swing.JLabel();
        target = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        newSourceDocumentButton = new javax.swing.JButton();
        checkoutID = new javax.swing.JTextField();
        randomIDButton = new javax.swing.JButton();
        checkoutSourceButton = new javax.swing.JButton();
        checkoutLinkButton = new javax.swing.JButton();
        checkoutTargetButton = new javax.swing.JButton();
        checkoutVersionNumber = new javax.swing.JTextField();
        checkoutVersionButton = new javax.swing.JButton();
        forwardTransformationButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        commitTripleButton = new javax.swing.JButton();
        commitSourceButton = new javax.swing.JButton();
        commitLinkButton = new javax.swing.JButton();
        commitTargetButton = new javax.swing.JButton();
        outputScrollPane = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        statusPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        p2pStatus = new javax.swing.JLabel();
        specialActionsPanel = new javax.swing.JPanel();
        replicateButton = new javax.swing.JButton();
        dummyInitButton = new javax.swing.JButton();
        stepLabel = new javax.swing.JLabel();
        step = new javax.swing.JLabel();
        testButton = new javax.swing.JButton();

        editMenuItem.setText("edit");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(editMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        p2pPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("P2P"));

        bootAddressLabel.setText("boot address");

        jLabel1.setText("local bind port");

        bootAddress.setText("192.168.2.35:9001");

        localBindPort.setText("9001");

        connectDisconnectButton.setText("connect");
        connectDisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDisconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p2pPanelLayout = new javax.swing.GroupLayout(p2pPanel);
        p2pPanel.setLayout(p2pPanelLayout);
        p2pPanelLayout.setHorizontalGroup(
            p2pPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p2pPanelLayout.createSequentialGroup()
                .addGroup(p2pPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p2pPanelLayout.createSequentialGroup()
                        .addComponent(bootAddressLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bootAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
                    .addGroup(p2pPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(localBindPort, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
                    .addComponent(connectDisconnectButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        p2pPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bootAddressLabel, jLabel1});

        p2pPanelLayout.setVerticalGroup(
            p2pPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p2pPanelLayout.createSequentialGroup()
                .addGroup(p2pPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bootAddressLabel)
                    .addComponent(bootAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p2pPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(localBindPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectDisconnectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        localCopyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("local copy"));

        source.setText("no source");
        source.setName("source"); // NOI18N
        source.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMouseClicked(evt);
            }
        });

        link.setText("no link");
        link.setName("link"); // NOI18N
        link.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMouseClicked(evt);
            }
        });

        target.setText("no target");
        target.setName("target"); // NOI18N
        target.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout localCopyPanelLayout = new javax.swing.GroupLayout(localCopyPanel);
        localCopyPanel.setLayout(localCopyPanelLayout);
        localCopyPanelLayout.setHorizontalGroup(
            localCopyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localCopyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(localCopyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(link, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(target, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addContainerGap())
        );
        localCopyPanelLayout.setVerticalGroup(
            localCopyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localCopyPanelLayout.createSequentialGroup()
                .addComponent(source)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(link)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(target)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        actionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("actions"));

        newSourceDocumentButton.setText("create new source document");
        newSourceDocumentButton.setEnabled(false);
        newSourceDocumentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSourceDocumentButtonActionPerformed(evt);
            }
        });

        checkoutID.setText("checkout ID");

        randomIDButton.setText("random ID");
        randomIDButton.setEnabled(false);
        randomIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomIDButtonActionPerformed(evt);
            }
        });

        checkoutSourceButton.setText("checkout source");
        checkoutSourceButton.setEnabled(false);
        checkoutSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutSourceButtonActionPerformed(evt);
            }
        });

        checkoutLinkButton.setText("checkout target");
        checkoutLinkButton.setEnabled(false);
        checkoutLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutLinkButtonActionPerformed(evt);
            }
        });

        checkoutTargetButton.setText("checkout link");
        checkoutTargetButton.setEnabled(false);
        checkoutTargetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutTargetButtonActionPerformed(evt);
            }
        });

        checkoutVersionNumber.setText("checkout version number");

        checkoutVersionButton.setText("checkout version number");
        checkoutVersionButton.setEnabled(false);

        forwardTransformationButton.setText("forward transformation");
        forwardTransformationButton.setEnabled(false);
        forwardTransformationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardTransformationButtonActionPerformed(evt);
            }
        });

        updateButton.setText("update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        commitTripleButton.setText("commit triple");
        commitTripleButton.setEnabled(false);
        commitTripleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitTripleButtonActionPerformed(evt);
            }
        });

        commitSourceButton.setText("commit source");
        commitSourceButton.setEnabled(false);
        commitSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitSourceButtonActionPerformed(evt);
            }
        });

        commitLinkButton.setText("commit link");
        commitLinkButton.setEnabled(false);
        commitLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitLinkButtonActionPerformed(evt);
            }
        });

        commitTargetButton.setText("commit target");
        commitTargetButton.setEnabled(false);
        commitTargetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitTargetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newSourceDocumentButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(actionPanelLayout.createSequentialGroup()
                                .addComponent(checkoutID, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(randomIDButton)
                                .addGap(89, 89, 89))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                                .addComponent(checkoutVersionNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                                .addGap(23, 23, 23)
                                .addComponent(checkoutVersionButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                        .addContainerGap(479, Short.MAX_VALUE)
                        .addComponent(forwardTransformationButton))
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                        .addContainerGap(170, Short.MAX_VALUE)
                        .addComponent(commitTripleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commitSourceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commitLinkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commitTargetButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                        .addContainerGap(281, Short.MAX_VALUE)
                        .addComponent(checkoutSourceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkoutTargetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkoutLinkButton)))
                .addContainerGap())
        );

        actionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkoutLinkButton, commitTargetButton});

        actionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkoutTargetButton, commitLinkButton});

        actionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkoutSourceButton, commitSourceButton});

        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addComponent(newSourceDocumentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomIDButton)
                    .addComponent(checkoutID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkoutVersionButton)
                    .addComponent(checkoutVersionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forwardTransformationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkoutLinkButton)
                    .addComponent(checkoutTargetButton)
                    .addComponent(checkoutSourceButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commitTargetButton)
                    .addComponent(commitLinkButton)
                    .addComponent(commitSourceButton)
                    .addComponent(commitTripleButton))
                .addContainerGap())
        );

        actionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {checkoutID, checkoutSourceButton});

        actionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {checkoutVersionButton, checkoutVersionNumber});

        outputScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("output"));

        output.setColumns(20);
        output.setRows(5);
        outputScrollPane.setViewportView(output);

        status.setText("jLabel2");

        p2pStatus.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        p2pStatus.setText("P2P online");
        p2pStatus.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 723, Short.MAX_VALUE)
                .addComponent(p2pStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .addComponent(p2pStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        specialActionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("special actions"));

        replicateButton.setText("replicate");
        replicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replicateButtonActionPerformed(evt);
            }
        });

        dummyInitButton.setText("dummy-init repository");
        dummyInitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dummyInitButtonActionPerformed(evt);
            }
        });

        stepLabel.setText("step");

        step.setText("0");

        testButton.setText("test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout specialActionsPanelLayout = new javax.swing.GroupLayout(specialActionsPanel);
        specialActionsPanel.setLayout(specialActionsPanelLayout);
        specialActionsPanelLayout.setHorizontalGroup(
            specialActionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialActionsPanelLayout.createSequentialGroup()
                .addContainerGap(337, Short.MAX_VALUE)
                .addGroup(specialActionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, specialActionsPanelLayout.createSequentialGroup()
                        .addComponent(testButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(replicateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dummyInitButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, specialActionsPanelLayout.createSequentialGroup()
                        .addComponent(stepLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(step)))
                .addContainerGap())
        );
        specialActionsPanelLayout.setVerticalGroup(
            specialActionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialActionsPanelLayout.createSequentialGroup()
                .addGroup(specialActionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dummyInitButton)
                    .addComponent(replicateButton)
                    .addComponent(testButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(specialActionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(step)
                    .addComponent(stepLabel))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(localCopyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(specialActionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
                    .addComponent(p2pPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p2pPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(localCopyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specialActionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-903)/2, (screenSize.height-706)/2, 903, 706);
    }// </editor-fold>//GEN-END:initComponents
    private void connectDisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDisconnectButtonActionPerformed
        if (connected) {
            disconnect();
        } else {
            connect();
        }
}//GEN-LAST:event_connectDisconnectButtonActionPerformed

    private void checkoutSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutSourceButtonActionPerformed
        execute(MonitorChangeItem.CHECKOUT_SOURCE);
}//GEN-LAST:event_checkoutSourceButtonActionPerformed

    private void randomIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomIDButtonActionPerformed
        checkoutID.setText(controller.getNodeAddressText());
    }//GEN-LAST:event_randomIDButtonActionPerformed

    private void forwardTransformationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardTransformationButtonActionPerformed
        
    }//GEN-LAST:event_forwardTransformationButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        
}//GEN-LAST:event_updateButtonActionPerformed

    private void commitTripleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitTripleButtonActionPerformed
        execute(MonitorChangeItem.COMMIT);
}//GEN-LAST:event_commitTripleButtonActionPerformed

    private void newSourceDocumentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSourceDocumentButtonActionPerformed
        controller.createDocument(DocumentType.SOURCE);
    }//GEN-LAST:event_newSourceDocumentButtonActionPerformed

    private void commitSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitSourceButtonActionPerformed
        execute(MonitorChangeItem.COMMIT_SOURCE);
}//GEN-LAST:event_commitSourceButtonActionPerformed

    private void commitLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitLinkButtonActionPerformed
        execute(MonitorChangeItem.COMMIT_LINK);
}//GEN-LAST:event_commitLinkButtonActionPerformed

    private void commitTargetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitTargetButtonActionPerformed
        execute(MonitorChangeItem.COMMIT_TARGET);
}//GEN-LAST:event_commitTargetButtonActionPerformed

    private void labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseClicked
        if (evt.getSource() instanceof JLabel) {
            contextMenuSource = (JLabel) evt.getSource();

            if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                popupMenu.show(this,
                        evt.getXOnScreen() - this.getX(),
                        evt.getYOnScreen() - this.getY());
            }
        }
}//GEN-LAST:event_labelMouseClicked

    private void editMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed
        if (!contextMenuSource.getText().endsWith(" [edited]")) {
            contextMenuSource.setText(contextMenuSource.getText() + " [edited]");
        }
        controller.editDocument((DocumentType) contextMenuSource.getClientProperty("indicator"));
    }//GEN-LAST:event_editMenuItemActionPerformed

    private void checkoutLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutLinkButtonActionPerformed
        execute(MonitorChangeItem.CHECKOUT_LINK);
}//GEN-LAST:event_checkoutLinkButtonActionPerformed

    private void checkoutTargetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutTargetButtonActionPerformed
        execute(MonitorChangeItem.CHECKOUT_TARGET);
}//GEN-LAST:event_checkoutTargetButtonActionPerformed

    private void dummyInitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dummyInitButtonActionPerformed
        execute(MonitorChangeItem.DUMMY_INIT_REPOSITORY);
    }//GEN-LAST:event_dummyInitButtonActionPerformed

    private void replicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replicateButtonActionPerformed
        execute(MonitorChangeItem.REPLICATE);
    }//GEN-LAST:event_replicateButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        execute(MonitorChangeItem.TEST);
    }//GEN-LAST:event_testButtonActionPerformed

    public void setButtonEnabled(ButtonType type, boolean state) {
        switch (type) {
            case CREATE_NEW_SOURCE:
                newSourceDocumentButton.setEnabled(state);
                break;
            case RANDOM_ID:
                randomIDButton.setEnabled(state);
                break;
            case CHECKOUT_SOURCE:
                checkoutSourceButton.setEnabled(state);
                break;
            case CHECKOUT_LINK:
                checkoutLinkButton.setEnabled(state);
                break;
            case CHECKOUT_TARGET:
                checkoutTargetButton.setEnabled(state);
                break;
            case CHECKOUT_WITH_VERSION_NUMBER:
                checkoutVersionButton.setEnabled(state);
                break;
            case FORWARD_TRANSFORMATION:
                forwardTransformationButton.setEnabled(state);
                break;
            case UPDATE:
                updateButton.setEnabled(state);
                break;
            case COMMIT_TRIPLE:
                commitTripleButton.setEnabled(state);
                break;
            case COMMIT_SOURCE:
                commitSourceButton.setEnabled(state);
                break;
            case COMMIT_LINK:
                commitLinkButton.setEnabled(state);
                break;
            case COMMIT_TARGET:
                commitTargetButton.setEnabled(state);
                break;
        }
    }

    public void setSource(String text) {
        source.setText(text);
    }

    public void setLink(String text) {
        link.setText(text);
    }

    public void setTarget(String text) {
        target.setText(text);
    }

    public String getDocumentText(DocumentType documentType) {
        String text = "";

        switch (documentType) {
            case SOURCE:
                text = source.getText();
                break;
            case LINK:
                text = link.getText();
                break;
            case TARGET:
                text = target.getText();
                break;
        }

        return text;
    }

    public void setDocumentText(String text, DocumentType documentType) {
        switch (documentType) {
            case SOURCE:
                setSource(text);
                commitSourceButton.setEnabled(true);
                break;
            case LINK:
                setLink(text);
                commitLinkButton.setEnabled(true);
                break;
            case TARGET:
                setTarget(text);
                commitTargetButton.setEnabled(true);
                break;
        }
    }

    public void setDocumentTextSimple(DocumentType documentType) {
        if (documentType == DocumentType.TRIPLE) {
            setDocumentTextSimple(DocumentType.SOURCE);
            setDocumentTextSimple(DocumentType.LINK);
            setDocumentTextSimple(DocumentType.TARGET);
        } else {
            String text = getDocumentText(documentType);

            if (text.endsWith(" [edited]")) {
                text = text.substring(0, text.indexOf(" [edited]"));
            }

            setDocumentText(text, documentType);
        }
    }

    public void setToolTipText(String text, DocumentType documentType) {
        switch (documentType) {
            case SOURCE:
                source.setToolTipText(text);
                break;
            case LINK:
                link.setToolTipText(text);
                break;
            case TARGET:
                target.setToolTipText(text);
                break;
        }
    }

    private File browse(final String extension, final String description) {
        File file = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return extension == null ||
                        extension.equals("") ||
                        extension.equals("*") ||
                        f.getName().endsWith("." + extension);
            }

            @Override
            public String getDescription() {
                return description;
            }
        });

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
        }

        return file;
    }

    private void connect() {
        execute(MonitorChangeItem.CONNECT);
    }

    private void disconnect() {
        execute(MonitorChangeItem.DISCONNECT);
    }

    private void setActionButtonsEnabled(boolean b) {
        newSourceDocumentButton.setEnabled(b);
        randomIDButton.setEnabled(b);
        checkoutSourceButton.setEnabled(b);
        checkoutLinkButton.setEnabled(b);
        checkoutTargetButton.setEnabled(b);
    }

    public void addOutputText(String text) {
        output.append(text);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }

    private void execute(MonitorChangeItem monitorChangeItem) {
        (monitor = new Monitor(monitorChangeItem)).execute();
    }

    private class Monitor extends SwingWorker<Void, String> {

        private MonitorChangeItem changeItem;

        public Monitor(MonitorChangeItem changeItem) {
            this.changeItem = changeItem;
        }

        @Override
        protected Void doInBackground() throws Exception {
            switch (changeItem) {
                case CONNECT:
                    if (!busyIconTimer.isRunning()) {
                        bootAddress.setEnabled(false);
                        localBindPort.setEnabled(false);
                        p2pStatus.setIcon(busyIcons[0]);
                        p2pStatus.setText("connecting");
                        connectDisconnectButton.setEnabled(false);
                        busyIconIndex = 0;
                        busyIconTimer.start();

                        LOGGER.info("start connect");
                        controller.connect();
                        LOGGER.info("end connect");

                        busyIconTimer.stop();

                        connected = true;
                        connectDisconnectButton.setText("disconnect");
                        connectDisconnectButton.setEnabled(true);

                        setActionButtonsEnabled(true);

                        p2pStatus.setIcon(onlineIcon);
                        p2pStatus.setText("P2P online");
                    }
                    break;
                case DISCONNECT:
                    connected = false;
                    connectDisconnectButton.setText("connect");
                    p2pStatus.setIcon(offlineIcon);
                    p2pStatus.setText("P2P offline");
                    bootAddress.setEnabled(true);
                    localBindPort.setEnabled(true);
                    setActionButtonsEnabled(false);
                    controller.disconnect();
                    break;
                case CHECKOUT_SOURCE:
                    //controller.checkoutRequest(checkoutID.getText());
                    controller.checkoutRequest(DocumentType.SOURCE);
                    break;
                case CHECKOUT_LINK:
                    //controller.checkoutRequest(checkoutID.getText());
                    controller.checkoutRequest(DocumentType.LINK);
                    break;
                case CHECKOUT_TARGET:
                    //controller.checkoutRequest(checkoutID.getText());
                    controller.checkoutRequest(DocumentType.TARGET);
                    break;
                case COMMIT:
                    controller.commit(DocumentType.TRIPLE);
                    break;
                case COMMIT_SOURCE:
                    controller.commit(DocumentType.SOURCE);
                    commitSourceButton.setEnabled(false);
                    break;
                case COMMIT_LINK:
                    controller.commit(DocumentType.LINK);
                    commitLinkButton.setEnabled(false);
                    break;
                case COMMIT_TARGET:
                    controller.commit(DocumentType.TARGET);
                    commitTargetButton.setEnabled(false);
                    break;
                case DUMMY_INIT_REPOSITORY:
                    step.setText(Integer.toString(controller.getDummyInitCounter() + 1));
                    controller.dummyInitRepository();
                    break;
                case REPLICATE:
                    controller.replicate();
                    break;
                case TEST:
                    controller.test();
                    break;
                default:
                    break;
            }

            return null;
        }

        public MonitorChangeItem getChangeItem() {
            return changeItem;
        }

        public void setChangeItem(MonitorChangeItem changeItem) {
            this.changeItem = changeItem;
        }
    }

    private enum MonitorChangeItem {

        CONNECT, DISCONNECT,
        CHECKOUT_SOURCE, CHECKOUT_LINK, CHECKOUT_TARGET,
        COMMIT, COMMIT_SOURCE, COMMIT_LINK, COMMIT_TARGET,
        DUMMY_INIT_REPOSITORY, REPLICATE,
        TEST;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JTextField bootAddress;
    private javax.swing.JLabel bootAddressLabel;
    private javax.swing.JTextField checkoutID;
    private javax.swing.JButton checkoutLinkButton;
    private javax.swing.JButton checkoutSourceButton;
    private javax.swing.JButton checkoutTargetButton;
    private javax.swing.JButton checkoutVersionButton;
    private javax.swing.JTextField checkoutVersionNumber;
    private javax.swing.JButton commitLinkButton;
    private javax.swing.JButton commitSourceButton;
    private javax.swing.JButton commitTargetButton;
    private javax.swing.JButton commitTripleButton;
    private javax.swing.JButton connectDisconnectButton;
    private javax.swing.JButton dummyInitButton;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JButton forwardTransformationButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel link;
    private javax.swing.JTextField localBindPort;
    private javax.swing.JPanel localCopyPanel;
    private javax.swing.JButton newSourceDocumentButton;
    private javax.swing.JTextArea output;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JPanel p2pPanel;
    private javax.swing.JLabel p2pStatus;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JButton randomIDButton;
    private javax.swing.JButton replicateButton;
    private javax.swing.JLabel source;
    private javax.swing.JPanel specialActionsPanel;
    private javax.swing.JLabel status;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel step;
    private javax.swing.JLabel stepLabel;
    private javax.swing.JLabel target;
    private javax.swing.JButton testButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
